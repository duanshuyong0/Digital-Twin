# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp"
# 21 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp"
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/MonotonicTimestamp.h" 1
# 24 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/MonotonicTimestamp.h"
# 1 "/usr/include/c++/6/cstdint" 1 3
# 32 "/usr/include/c++/6/cstdint" 3
       
# 33 "/usr/include/c++/6/cstdint" 3





# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 1 3
# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3

# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 221 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 507 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 1 3
# 39 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 364 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 1 3 4
# 415 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 416 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 2 3 4
# 365 "/usr/include/features.h" 2 3 4
# 388 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 1 3 4
# 10 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs-hard.h" 1 3 4
# 11 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 2 3 4
# 389 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 2 3
# 508 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3


# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/cpu_defines.h" 1 3
# 511 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3
# 39 "/usr/include/c++/6/cstdint" 2 3


# 1 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;



__extension__
typedef long long int int64_t;




typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/6/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 25 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/MonotonicTimestamp.h" 2

# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/TimeDuration.h" 1
# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/TimeDuration.h"

# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/TimeDuration.h"
namespace openpal
{

template <class T>
class TimeDurationBase
{

public:

 TimeDurationBase() : milliseconds(0)
 {}

 T GetMilliseconds() const
 {
  return milliseconds;
 }

 bool IsNegative() const
 {
  return milliseconds < 0;
 }

 operator T() const
 {
  return milliseconds;
 }

 T milliseconds;

protected:

 TimeDurationBase(T milliseconds) : milliseconds(milliseconds)
 {}

};





class TimeDuration : public TimeDurationBase<int64_t>
{

public:

 TimeDuration();

 bool IsPostive() const;

 TimeDuration MultiplyBy(int factor) const
 {
  return TimeDuration(factor * milliseconds);
 }

 static TimeDuration Min();

 static TimeDuration Max();

 static TimeDuration Zero();

 static TimeDuration Milliseconds(int64_t milliseconds);

 static TimeDuration Seconds(int64_t seconds);

 static TimeDuration Minutes(int64_t minutes);

 static TimeDuration Hours(int64_t hours);

 static TimeDuration Days(int64_t days);

private:
 TimeDuration(int64_t aMilliseconds);
};

bool operator==(const TimeDuration& lhs, const TimeDuration& rhs);

}
# 27 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/executor/MonotonicTimestamp.h" 2

namespace openpal
{




class MonotonicTimestamp
{

public:

 static MonotonicTimestamp Max();
 static MonotonicTimestamp Min();

 bool IsMax() const;
 bool IsMin() const;

 MonotonicTimestamp();

 explicit MonotonicTimestamp(int64_t milliseconds);


 MonotonicTimestamp Add(const TimeDuration& duration) const;

 int64_t milliseconds;
};

bool operator==(const MonotonicTimestamp& first, const MonotonicTimestamp& second);
bool operator<(const MonotonicTimestamp& first, const MonotonicTimestamp& second);
bool operator>(const MonotonicTimestamp& first, const MonotonicTimestamp& second);


}
# 22 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp" 2



namespace openpal
{

MonotonicTimestamp MonotonicTimestamp::Max()
{
 return MonotonicTimestamp(
# 30 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp" 3 4
                          (9223372036854775807LL)
# 30 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp"
                                   );
}

MonotonicTimestamp MonotonicTimestamp::Min()
{
 return MonotonicTimestamp(
# 35 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp" 3 4
                          (-9223372036854775807LL -1)
# 35 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp"
                                   );
}

bool MonotonicTimestamp::IsMax() const
{
 return milliseconds == 
# 40 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp" 3 4
                       (9223372036854775807LL)
# 40 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp"
                                ;
}

bool MonotonicTimestamp::IsMin() const
{
 return milliseconds == 
# 45 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp" 3 4
                       (-9223372036854775807LL -1)
# 45 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp"
                                ;
}

MonotonicTimestamp::MonotonicTimestamp() : milliseconds(0)
{}

MonotonicTimestamp::MonotonicTimestamp(int64_t aMilliseconds) : milliseconds(aMilliseconds)
{}


MonotonicTimestamp MonotonicTimestamp::Add(const TimeDuration& duration) const
{
 const auto maximum = 
# 57 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp" 3 4
                     (9223372036854775807LL) 
# 57 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/openpal/executor/MonotonicTimestamp.cpp"
                               - this->milliseconds;

 return duration.GetMilliseconds() >= maximum ? MonotonicTimestamp::Max() : MonotonicTimestamp(milliseconds + duration.GetMilliseconds());
}

bool operator==(const MonotonicTimestamp& first, const MonotonicTimestamp& second)
{
 return first.milliseconds == second.milliseconds;
}

bool operator<(const MonotonicTimestamp& first, const MonotonicTimestamp& second)
{
 return first.milliseconds < second.milliseconds;
}

bool operator>(const MonotonicTimestamp& first, const MonotonicTimestamp& second)
{
 return first.milliseconds > second.milliseconds;
}

}
