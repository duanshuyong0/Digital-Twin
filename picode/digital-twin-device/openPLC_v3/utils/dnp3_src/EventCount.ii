# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.cpp"
# 21 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.cpp"
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.h" 1
# 24 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.h"
# 1 "/usr/include/c++/6/cstdint" 1 3
# 32 "/usr/include/c++/6/cstdint" 3
       
# 33 "/usr/include/c++/6/cstdint" 3





# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 1 3
# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3

# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 221 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 507 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 1 3
# 39 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 364 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 1 3 4
# 415 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 416 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 2 3 4
# 365 "/usr/include/features.h" 2 3 4
# 388 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 1 3 4
# 10 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs-hard.h" 1 3 4
# 11 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 2 3 4
# 389 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 2 3
# 508 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3


# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/cpu_defines.h" 1 3
# 511 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3
# 39 "/usr/include/c++/6/cstdint" 2 3


# 1 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;



__extension__
typedef long long int int64_t;




typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/6/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 25 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.h" 2

# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h" 1
# 24 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h"

# 24 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/util/Uncopyable.h"
namespace openpal
{



class Uncopyable
{
protected:
 Uncopyable() {}
 ~Uncopyable() {}

private:

 Uncopyable(const Uncopyable&) = delete;
 Uncopyable& operator=(const Uncopyable&) = delete;
};

class StaticOnly
{

private:

 StaticOnly() = delete;
 StaticOnly(const StaticOnly&) = delete;
 StaticOnly& operator=(const StaticOnly&) = delete;
};

}
# 27 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.h" 2

# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ClassField.h" 1
# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ClassField.h"
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/EventType.h" 1
# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/EventType.h"
namespace opendnp3
{

static const int NUM_OUTSTATION_EVENT_TYPES = 8;

enum class EventType : uint16_t
{
 Binary = 0,
 Analog = 1,
 Counter = 2,
 FrozenCounter = 3,
 DoubleBitBinary = 4,
 BinaryOutputStatus = 5,
 AnalogOutputStatus = 6,
 SecurityStat = 7
};

enum class EventClass : uint8_t
{
 EC1 = 0,
 EC2 = 1,
 EC3 = 2
};

}
# 27 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ClassField.h" 2
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/PointClass.h" 1
# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/PointClass.h"
namespace opendnp3 {




enum class PointClass : uint8_t
{

  Class0 = 0x1,

  Class1 = 0x2,

  Class2 = 0x4,

  Class3 = 0x8
};


}
# 28 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/ClassField.h" 2

namespace opendnp3
{




class ClassField
{
public:

 ClassField();

 ClassField(PointClass pc);

 ClassField(uint8_t mask_);

 ClassField(bool class0, bool class1, bool class2, bool class3);

 bool IsEmpty() const;

 bool Intersects(const ClassField& other) const;

 uint8_t GetBitfield() const
 {
  return bitfield;
 };

 ClassField OnlyEventClasses() const;

 void Clear(const ClassField& field);

 void Set(const ClassField& field);

 void Set(PointClass pc);

 static const uint8_t CLASS_0 = static_cast<uint8_t>(PointClass::Class0);
 static const uint8_t CLASS_1 = static_cast<uint8_t>(PointClass::Class1);
 static const uint8_t CLASS_2 = static_cast<uint8_t>(PointClass::Class2);
 static const uint8_t CLASS_3 = static_cast<uint8_t>(PointClass::Class3);
 static const uint8_t EVENT_CLASSES = CLASS_1 | CLASS_2 | CLASS_3;
 static const uint8_t ALL_CLASSES = EVENT_CLASSES | CLASS_0;

 bool HasEventType(EventClass ec) const;

 bool HasClass0() const;
 bool HasClass1() const;
 bool HasClass2() const;
 bool HasClass3() const;

 bool HasEventClass() const;
 bool HasAnyClass() const;

 static ClassField None();
 static ClassField AllClasses();
 static ClassField AllEventClasses();

private:
 uint8_t bitfield;
};


}
# 29 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.h" 2


namespace opendnp3
{

class EventCount
{
 static const uint16_t NUM_CLASSES = 3;
 static const uint16_t NUM_TYPES = 8;

public:

 EventCount();

 EventCount(const EventCount& ec);

 EventCount& operator=(const EventCount& ec);

 ClassField ToClassField() const;

 uint32_t NumOfClass(EventClass clazz) const;
 uint32_t NumOfClass(ClassField field) const;
 uint32_t NumOfType(EventType type) const;

 uint32_t TotatCount() const
 {
  return total;
 }

 void Increment(EventClass clazz, EventType type);
 void Decrement(EventClass clazz, EventType type);

 bool IsEmpty() const;

 void Clear();

private:

 bool SameNumberForClass(const EventCount& rhs, EventClass clazz) const;

 uint32_t total;
 uint32_t numOfType[NUM_TYPES];
 uint32_t numOfClass[NUM_CLASSES];
};

}
# 22 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventCount.cpp" 2



namespace opendnp3
{

EventCount::EventCount() : total(0)
{
 this->Clear();
}

EventCount::EventCount(const EventCount& ec) : total(ec.total)
{
 for (uint16_t clazz = 0; clazz < NUM_CLASSES; ++clazz)
 {
  numOfClass[clazz] = ec.numOfClass[clazz];
 }


 for (uint16_t type = 0; type < NUM_TYPES; ++type)
 {
  numOfType[type] = ec.numOfType[type];
 }
}

EventCount& EventCount::operator=(const EventCount& ec)
{
 if (this != &ec)
 {
  this->total = ec.total;

  for (uint16_t clazz = 0; clazz < NUM_CLASSES; ++clazz)
  {
   numOfClass[clazz] = ec.numOfClass[clazz];
  }


  for (uint16_t type = 0; type < NUM_TYPES; ++type)
  {
   numOfType[type] = ec.numOfType[type];
  }
 }

 return *this;
}

void EventCount::Clear()
{
 total = 0;

 for (uint16_t clazz = 0; clazz < NUM_CLASSES; ++clazz)
 {
  numOfClass[clazz] = 0;
 }


 for (uint16_t type = 0; type < NUM_TYPES; ++type)
 {
  numOfType[type] = 0;
 }
}

ClassField EventCount::ToClassField() const
{
 bool class1 = this->NumOfClass(EventClass::EC1) > 0;
 bool class2 = this->NumOfClass(EventClass::EC2) > 0;
 bool class3 = this->NumOfClass(EventClass::EC3) > 0;

 return ClassField(false, class1, class2, class3);
}

uint32_t EventCount::NumOfClass(ClassField field) const
{
 uint32_t ret = 0;

 if (field.HasClass1()) ret += NumOfClass(EventClass::EC1);
 if (field.HasClass2()) ret += NumOfClass(EventClass::EC2);
 if (field.HasClass3()) ret += NumOfClass(EventClass::EC3);

 return ret;
}

uint32_t EventCount::NumOfClass(EventClass clazz) const
{
 return numOfClass[static_cast<uint8_t>(clazz)];
}

uint32_t EventCount::NumOfType(EventType type) const
{
 return numOfType[static_cast<uint8_t>(type)];
}

bool EventCount::IsEmpty() const
{
 return ToClassField().IsEmpty();
}

void EventCount::Increment(EventClass clazz, EventType type)
{
 ++total;
 ++numOfClass[static_cast<int>(clazz)];
 ++numOfType[static_cast<int>(type)];
}

void EventCount::Decrement(EventClass clazz, EventType type)
{
 --total;
 --numOfType[static_cast<int>(type)];
 --numOfClass[static_cast<int>(clazz)];
}

}
