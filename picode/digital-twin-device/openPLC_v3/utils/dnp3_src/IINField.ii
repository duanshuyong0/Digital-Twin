# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/IINField.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/IINField.cpp"
# 21 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/IINField.cpp"
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/IINField.h" 1
# 24 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/IINField.h"
# 1 "/usr/include/c++/6/cstdint" 1 3
# 32 "/usr/include/c++/6/cstdint" 3
       
# 33 "/usr/include/c++/6/cstdint" 3





# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 1 3
# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3

# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 221 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 507 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 1 3
# 39 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 364 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 1 3 4
# 415 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 416 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 2 3 4
# 365 "/usr/include/features.h" 2 3 4
# 388 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 1 3 4
# 10 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs-hard.h" 1 3 4
# 11 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 2 3 4
# 389 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 2 3
# 508 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3


# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/cpu_defines.h" 1 3
# 511 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3
# 39 "/usr/include/c++/6/cstdint" 2 3


# 1 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;



__extension__
typedef long long int int64_t;




typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/6/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 25 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/IINField.h" 2


# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/IINField.h"
namespace opendnp3
{

enum class IINBit
{
 ALL_STATIONS = 0,
 CLASS1_EVENTS,
 CLASS2_EVENTS,
 CLASS3_EVENTS,
 NEED_TIME,
 LOCAL_CONTROL,
 DEVICE_TROUBLE,
 DEVICE_RESTART,
 FUNC_NOT_SUPPORTED,
 OBJECT_UNKNOWN,
 PARAM_ERROR,
 EVENT_BUFFER_OVERFLOW,
 ALREADY_EXECUTING,
 CONFIG_CORRUPT,
 RESERVED1,
 RESERVED2 = 15
};



class IINField
{

private:

 enum class LSBMask : uint8_t
 {
  ALL_STATIONS = 0x01,
  CLASS1_EVENTS = 0x02,
  CLASS2_EVENTS = 0x04,
  CLASS3_EVENTS = 0x08,
  NEED_TIME = 0x10,
  LOCAL_CONTROL = 0x20,
  DEVICE_TROUBLE = 0x40,
  DEVICE_RESTART = 0x80,
 };

 enum class MSBMask : uint8_t
 {
  FUNC_NOT_SUPPORTED = 0x01,
  OBJECT_UNKNOWN = 0x02,
  PARAM_ERROR = 0x04,
  EVENT_BUFFER_OVERFLOW = 0x08,
  ALREADY_EXECUTING = 0x10,
  CONFIG_CORRUPT = 0x20,
  RESERVED1 = 0x40,
  RESERVED2 = 0x80,


  REQUEST_ERROR_MASK = FUNC_NOT_SUPPORTED | OBJECT_UNKNOWN | PARAM_ERROR
 };


public:

 static IINField Empty()
 {
  return IINField(0, 0);
 }

 IINField(IINBit bit) : LSB(0), MSB(0)
 {
  this->SetBit(bit);
 }

 IINField(uint8_t aLSB, uint8_t aMSB) : LSB(aLSB), MSB(aMSB)
 {}

 IINField() : LSB(0), MSB(0)
 {}

 bool IsSet(IINBit bit) const;

 bool IsClear(IINBit bit) const
 {
  return !IsSet(bit);
 }

 void SetBit(IINBit bit);
 void ClearBit(IINBit bit);

 void SetBitToValue(IINBit bit, bool value);

 bool operator==(const IINField& arRHS) const;

 bool Any() const
 {
  return (LSB | MSB) != 0;
 }

 void Clear()
 {
  LSB = MSB = 0;
 }

 bool HasRequestError() const
 {
  return Get(MSBMask::REQUEST_ERROR_MASK);
 }

 IINField operator|(const IINField& aIIN) const
 {
  return IINField(LSB | aIIN.LSB, MSB | aIIN.MSB);
 }

 IINField& operator|=(const IINField& aIIN)
 {
  MSB |= aIIN.MSB;
  LSB |= aIIN.LSB;
  return *this;
 }

 IINField operator&(const IINField& aIIN) const
 {
  return IINField(LSB & aIIN.LSB, MSB & aIIN.MSB);
 }

 IINField& operator&=(const IINField& aIIN)
 {
  MSB &= aIIN.MSB;
  LSB &= aIIN.LSB;
  return *this;
 }

 IINField operator~() const
 {
  return IINField(~LSB, ~MSB);
 }

 uint8_t LSB;
 uint8_t MSB;

private:

 static const uint8_t REQUEST_ERROR_MASK;

 inline bool Get(LSBMask bit) const
 {
  return (LSB & static_cast<uint8_t>(bit)) != 0;
 }

 inline bool Get(MSBMask bit) const
 {
  return (MSB & static_cast<uint8_t>(bit)) != 0;
 }

 inline void Set(LSBMask bit)
 {
  LSB |= static_cast<uint8_t>(bit);
 }
 inline void Set(MSBMask bit)
 {
  MSB |= static_cast<uint8_t>(bit);
 }

 inline void Clear(LSBMask bit)
 {
  LSB &= ~static_cast<uint8_t>(bit);
 }
 inline void Clear(MSBMask bit)
 {
  MSB &= ~static_cast<uint8_t>(bit);
 }
};

}
# 22 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/IINField.cpp" 2

# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/util/ToHex.h" 1
# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/openpal/util/ToHex.h"
namespace openpal
{

char ToHexChar(char c);

}
# 24 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/app/IINField.cpp" 2

using namespace openpal;
using namespace std;

namespace opendnp3
{

bool IINField::IsSet(IINBit bit) const
{
 switch(bit)
 {
 case(IINBit::ALL_STATIONS):
  return Get(LSBMask::ALL_STATIONS);
 case(IINBit::CLASS1_EVENTS):
  return Get(LSBMask::CLASS1_EVENTS);
 case(IINBit::CLASS2_EVENTS):
  return Get(LSBMask::CLASS2_EVENTS);
 case(IINBit::CLASS3_EVENTS):
  return Get(LSBMask::CLASS3_EVENTS);
 case(IINBit::NEED_TIME):
  return Get(LSBMask::NEED_TIME);
 case(IINBit::LOCAL_CONTROL):
  return Get(LSBMask::LOCAL_CONTROL);
 case(IINBit::DEVICE_TROUBLE):
  return Get(LSBMask::DEVICE_TROUBLE);
 case(IINBit::DEVICE_RESTART):
  return Get(LSBMask::DEVICE_RESTART);
 case(IINBit::FUNC_NOT_SUPPORTED):
  return Get(MSBMask::FUNC_NOT_SUPPORTED);
 case(IINBit::OBJECT_UNKNOWN):
  return Get(MSBMask::OBJECT_UNKNOWN);
 case(IINBit::PARAM_ERROR):
  return Get(MSBMask::PARAM_ERROR);
 case(IINBit::EVENT_BUFFER_OVERFLOW):
  return Get(MSBMask::EVENT_BUFFER_OVERFLOW);
 case(IINBit::ALREADY_EXECUTING):
  return Get(MSBMask::ALREADY_EXECUTING);
 case(IINBit::CONFIG_CORRUPT):
  return Get(MSBMask::CONFIG_CORRUPT);
 case(IINBit::RESERVED1):
  return Get(MSBMask::RESERVED1);
 case(IINBit::RESERVED2):
  return Get(MSBMask::RESERVED2);
 default:
  return false;
 };
}

void IINField::SetBitToValue(IINBit bit, bool value)
{
 if (value)
 {
  SetBit(bit);
 }
 else
 {
  ClearBit(bit);
 }
}

void IINField::SetBit(IINBit bit)
{
 switch(bit)
 {
 case(IINBit::ALL_STATIONS):
  Set(LSBMask::ALL_STATIONS);
  break;
 case(IINBit::CLASS1_EVENTS):
  Set(LSBMask::CLASS1_EVENTS);
  break;
 case(IINBit::CLASS2_EVENTS):
  Set(LSBMask::CLASS2_EVENTS);
  break;
 case(IINBit::CLASS3_EVENTS):
  Set(LSBMask::CLASS3_EVENTS);
  break;
 case(IINBit::NEED_TIME):
  Set(LSBMask::NEED_TIME);
  break;
 case(IINBit::LOCAL_CONTROL):
  Set(LSBMask::LOCAL_CONTROL);
  break;
 case(IINBit::DEVICE_TROUBLE):
  Set(LSBMask::DEVICE_TROUBLE);
  break;
 case(IINBit::DEVICE_RESTART):
  Set(LSBMask::DEVICE_RESTART);
  break;
 case(IINBit::FUNC_NOT_SUPPORTED):
  Set(MSBMask::FUNC_NOT_SUPPORTED);
  break;
 case(IINBit::OBJECT_UNKNOWN):
  Set(MSBMask::OBJECT_UNKNOWN);
  break;
 case(IINBit::PARAM_ERROR):
  Set(MSBMask::PARAM_ERROR);
  break;
 case(IINBit::EVENT_BUFFER_OVERFLOW):
  Set(MSBMask::EVENT_BUFFER_OVERFLOW);
  break;
 case(IINBit::ALREADY_EXECUTING):
  Set(MSBMask::ALREADY_EXECUTING);
  break;
 case(IINBit::CONFIG_CORRUPT):
  Set(MSBMask::CONFIG_CORRUPT);
  break;
 case(IINBit::RESERVED1):
  Set(MSBMask::RESERVED1);
  break;
 case(IINBit::RESERVED2):
  Set(MSBMask::RESERVED2);
  break;
 default:
  break;
 };
}

void IINField::ClearBit(IINBit bit)
{
 switch(bit)
 {
 case(IINBit::ALL_STATIONS):
  Clear(LSBMask::ALL_STATIONS);
  break;
 case(IINBit::CLASS1_EVENTS):
  Clear(LSBMask::CLASS1_EVENTS);
  break;
 case(IINBit::CLASS2_EVENTS):
  Clear(LSBMask::CLASS2_EVENTS);
  break;
 case(IINBit::CLASS3_EVENTS):
  Clear(LSBMask::CLASS3_EVENTS);
  break;
 case(IINBit::NEED_TIME):
  Clear(LSBMask::NEED_TIME);
  break;
 case(IINBit::LOCAL_CONTROL):
  Clear(LSBMask::LOCAL_CONTROL);
  break;
 case(IINBit::DEVICE_TROUBLE):
  Clear(LSBMask::DEVICE_TROUBLE);
  break;
 case(IINBit::DEVICE_RESTART):
  Clear(LSBMask::DEVICE_RESTART);
  break;
 case(IINBit::FUNC_NOT_SUPPORTED):
  Clear(MSBMask::FUNC_NOT_SUPPORTED);
  break;
 case(IINBit::OBJECT_UNKNOWN):
  Clear(MSBMask::OBJECT_UNKNOWN);
  break;
 case(IINBit::PARAM_ERROR):
  Clear(MSBMask::PARAM_ERROR);
  break;
 case(IINBit::EVENT_BUFFER_OVERFLOW):
  Clear(MSBMask::EVENT_BUFFER_OVERFLOW);
  break;
 case(IINBit::ALREADY_EXECUTING):
  Clear(MSBMask::ALREADY_EXECUTING);
  break;
 case(IINBit::CONFIG_CORRUPT):
  Clear(MSBMask::CONFIG_CORRUPT);
  break;
 case(IINBit::RESERVED1):
  Clear(MSBMask::RESERVED1);
  break;
 case(IINBit::RESERVED2):
  Clear(MSBMask::RESERVED2);
  break;
 default:
  break;
 };
}

bool IINField::operator==(const IINField& aRHS) const
{
 return (LSB == aRHS.LSB) && (MSB == aRHS.MSB);
}

}
