# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventBufferConfig.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventBufferConfig.cpp"
# 21 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventBufferConfig.cpp"
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/EventBufferConfig.h" 1
# 24 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/EventBufferConfig.h"
# 1 "/usr/include/c++/6/cstdint" 1 3
# 32 "/usr/include/c++/6/cstdint" 3
       
# 33 "/usr/include/c++/6/cstdint" 3





# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 1 3
# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3

# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 221 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 507 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 1 3
# 39 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 364 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 1 3 4
# 415 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 416 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 2 3 4
# 365 "/usr/include/features.h" 2 3 4
# 388 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 1 3 4
# 10 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs-hard.h" 1 3 4
# 11 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 2 3 4
# 389 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 2 3
# 508 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3


# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/cpu_defines.h" 1 3
# 511 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3
# 39 "/usr/include/c++/6/cstdint" 2 3


# 1 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;



__extension__
typedef long long int int64_t;




typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/6/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 25 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/EventBufferConfig.h" 2

# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/EventType.h" 1
# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/EventType.h"

# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/app/EventType.h"
namespace opendnp3
{

static const int NUM_OUTSTATION_EVENT_TYPES = 8;

enum class EventType : uint16_t
{
 Binary = 0,
 Analog = 1,
 Counter = 2,
 FrozenCounter = 3,
 DoubleBitBinary = 4,
 BinaryOutputStatus = 5,
 AnalogOutputStatus = 6,
 SecurityStat = 7
};

enum class EventClass : uint8_t
{
 EC1 = 0,
 EC2 = 1,
 EC3 = 2
};

}
# 27 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/EventBufferConfig.h" 2

namespace opendnp3
{
# 43 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/outstation/EventBufferConfig.h"
struct EventBufferConfig
{




 static EventBufferConfig AllTypes(uint16_t sizes);


 uint16_t GetMaxEventsForType(EventType type) const;




 EventBufferConfig(
     uint16_t maxBinaryEvents = 0,
     uint16_t maxDoubleBinaryEvents = 0,
     uint16_t maxAnalogEvents = 0,
     uint16_t maxCounterEvents = 0,
     uint16_t maxFrozenCounterEvents = 0,
     uint16_t maxBinaryOutputStatusEvents = 0,
     uint16_t maxAnalogOutputStatusEvents = 0,
     uint16_t maxSecurityStatisticEvents = 0
 );


 uint32_t TotalEvents() const;


 uint16_t maxBinaryEvents;


 uint16_t maxDoubleBinaryEvents;


 uint16_t maxAnalogEvents;


 uint16_t maxCounterEvents;


 uint16_t maxFrozenCounterEvents;


 uint16_t maxBinaryOutputStatusEvents;


 uint16_t maxAnalogOutputStatusEvents;


 uint16_t maxSecurityStatisticEvents;
};

}
# 22 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/outstation/EventBufferConfig.cpp" 2

namespace opendnp3
{

EventBufferConfig EventBufferConfig::AllTypes(uint16_t sizes)
{
 return EventBufferConfig(sizes, sizes, sizes, sizes, sizes, sizes, sizes, sizes);
}

uint16_t EventBufferConfig::GetMaxEventsForType(EventType type) const
{
 switch (type)
 {
 case(EventType::Binary) :
  return maxBinaryEvents;
 case(EventType::DoubleBitBinary) :
  return maxDoubleBinaryEvents;
 case(EventType::BinaryOutputStatus) :
  return maxBinaryOutputStatusEvents;
 case(EventType::Counter) :
  return maxCounterEvents;
 case(EventType::FrozenCounter) :
  return maxFrozenCounterEvents;
 case(EventType::Analog) :
  return maxAnalogEvents;
 case(EventType::AnalogOutputStatus) :
  return maxAnalogOutputStatusEvents;
 case(EventType::SecurityStat) :
  return maxSecurityStatisticEvents;
 default:
  return 0;
 }
}

EventBufferConfig::EventBufferConfig(
    uint16_t maxBinaryEvents_,
    uint16_t maxDoubleBinaryEvents_,
    uint16_t maxAnalogEvents_,
    uint16_t maxCounterEvents_,
    uint16_t maxFrozenCounterEvents_,
    uint16_t maxBinaryOutputStatusEvents_,
    uint16_t maxAnalogOutputStatusEvents_,
    uint16_t maxSecurityStatisticEvents_) :

 maxBinaryEvents(maxBinaryEvents_),
 maxDoubleBinaryEvents(maxDoubleBinaryEvents_),
 maxAnalogEvents(maxAnalogEvents_),
 maxCounterEvents(maxCounterEvents_),
 maxFrozenCounterEvents(maxFrozenCounterEvents_),
 maxBinaryOutputStatusEvents(maxBinaryOutputStatusEvents_),
 maxAnalogOutputStatusEvents(maxAnalogOutputStatusEvents_),
 maxSecurityStatisticEvents(maxSecurityStatisticEvents_)
{

}

uint32_t EventBufferConfig::TotalEvents() const
{
 return maxBinaryEvents +
         maxDoubleBinaryEvents +
         maxAnalogEvents +
         maxCounterEvents +
         maxFrozenCounterEvents +
         maxBinaryOutputStatusEvents +
         maxAnalogOutputStatusEvents +
         maxSecurityStatisticEvents;
}


}
