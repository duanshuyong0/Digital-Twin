# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/gen/FunctionCode.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/gen/FunctionCode.cpp"
# 21 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/gen/FunctionCode.cpp"
# 1 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FunctionCode.h" 1
# 24 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FunctionCode.h"
# 1 "/usr/include/c++/6/cstdint" 1 3
# 32 "/usr/include/c++/6/cstdint" 3
       
# 33 "/usr/include/c++/6/cstdint" 3





# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 1 3
# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3

# 199 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 221 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 507 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 3
# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 1 3
# 39 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 364 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 1 3 4
# 415 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 416 "/usr/include/arm-linux-gnueabihf/sys/cdefs.h" 2 3 4
# 365 "/usr/include/features.h" 2 3 4
# 388 "/usr/include/features.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 1 3 4
# 10 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/gnu/stubs-hard.h" 1 3 4
# 11 "/usr/include/arm-linux-gnueabihf/gnu/stubs.h" 2 3 4
# 389 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/arm-linux-gnueabihf/c++/6/bits/os_defines.h" 2 3
# 508 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3


# 1 "/usr/include/arm-linux-gnueabihf/c++/6/bits/cpu_defines.h" 1 3
# 511 "/usr/include/arm-linux-gnueabihf/c++/6/bits/c++config.h" 2 3
# 39 "/usr/include/c++/6/cstdint" 2 3


# 1 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/arm-linux-gnueabihf/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;



__extension__
typedef long long int int64_t;




typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 125 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 137 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 10 "/usr/lib/gcc/arm-linux-gnueabihf/6/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/6/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 25 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FunctionCode.h" 2


# 26 "/home/pi/OpenPLC_v3/utils/dnp3_src/./cpp/libs/include/opendnp3/gen/FunctionCode.h"
namespace opendnp3 {




enum class FunctionCode : uint8_t
{

  CONFIRM = 0x0,

  READ = 0x1,

  WRITE = 0x2,

  SELECT = 0x3,

  OPERATE = 0x4,

  DIRECT_OPERATE = 0x5,

  DIRECT_OPERATE_NR = 0x6,

  IMMED_FREEZE = 0x7,

  IMMED_FREEZE_NR = 0x8,

  FREEZE_CLEAR = 0x9,

  FREEZE_CLEAR_NR = 0xA,

  FREEZE_AT_TIME = 0xB,

  FREEZE_AT_TIME_NR = 0xC,

  COLD_RESTART = 0xD,

  WARM_RESTART = 0xE,

  INITIALIZE_DATA = 0xF,

  INITIALIZE_APPLICATION = 0x10,

  START_APPLICATION = 0x11,

  STOP_APPLICATION = 0x12,

  SAVE_CONFIGURATION = 0x13,

  ENABLE_UNSOLICITED = 0x14,

  DISABLE_UNSOLICITED = 0x15,

  ASSIGN_CLASS = 0x16,

  DELAY_MEASURE = 0x17,

  RECORD_CURRENT_TIME = 0x18,

  OPEN_FILE = 0x19,

  CLOSE_FILE = 0x1A,

  DELETE_FILE = 0x1B,

  GET_FILE_INFO = 0x1C,

  AUTHENTICATE_FILE = 0x1D,

  ABORT_FILE = 0x1E,

  AUTH_REQUEST = 0x20,

  AUTH_REQUEST_NO_ACK = 0x21,

  RESPONSE = 0x81,

  UNSOLICITED_RESPONSE = 0x82,

  AUTH_RESPONSE = 0x83,

  UNKNOWN = 0xFF
};

uint8_t FunctionCodeToType(FunctionCode arg);
FunctionCode FunctionCodeFromType(uint8_t arg);
char const* FunctionCodeToString(FunctionCode arg);

}
# 22 "/home/pi/OpenPLC_v3/utils/dnp3_src/cpp/libs/src/opendnp3/gen/FunctionCode.cpp" 2

namespace opendnp3 {

uint8_t FunctionCodeToType(FunctionCode arg)
{
  return static_cast<uint8_t>(arg);
}
FunctionCode FunctionCodeFromType(uint8_t arg)
{
  switch(arg)
  {
    case(0x0):
      return FunctionCode::CONFIRM;
    case(0x1):
      return FunctionCode::READ;
    case(0x2):
      return FunctionCode::WRITE;
    case(0x3):
      return FunctionCode::SELECT;
    case(0x4):
      return FunctionCode::OPERATE;
    case(0x5):
      return FunctionCode::DIRECT_OPERATE;
    case(0x6):
      return FunctionCode::DIRECT_OPERATE_NR;
    case(0x7):
      return FunctionCode::IMMED_FREEZE;
    case(0x8):
      return FunctionCode::IMMED_FREEZE_NR;
    case(0x9):
      return FunctionCode::FREEZE_CLEAR;
    case(0xA):
      return FunctionCode::FREEZE_CLEAR_NR;
    case(0xB):
      return FunctionCode::FREEZE_AT_TIME;
    case(0xC):
      return FunctionCode::FREEZE_AT_TIME_NR;
    case(0xD):
      return FunctionCode::COLD_RESTART;
    case(0xE):
      return FunctionCode::WARM_RESTART;
    case(0xF):
      return FunctionCode::INITIALIZE_DATA;
    case(0x10):
      return FunctionCode::INITIALIZE_APPLICATION;
    case(0x11):
      return FunctionCode::START_APPLICATION;
    case(0x12):
      return FunctionCode::STOP_APPLICATION;
    case(0x13):
      return FunctionCode::SAVE_CONFIGURATION;
    case(0x14):
      return FunctionCode::ENABLE_UNSOLICITED;
    case(0x15):
      return FunctionCode::DISABLE_UNSOLICITED;
    case(0x16):
      return FunctionCode::ASSIGN_CLASS;
    case(0x17):
      return FunctionCode::DELAY_MEASURE;
    case(0x18):
      return FunctionCode::RECORD_CURRENT_TIME;
    case(0x19):
      return FunctionCode::OPEN_FILE;
    case(0x1A):
      return FunctionCode::CLOSE_FILE;
    case(0x1B):
      return FunctionCode::DELETE_FILE;
    case(0x1C):
      return FunctionCode::GET_FILE_INFO;
    case(0x1D):
      return FunctionCode::AUTHENTICATE_FILE;
    case(0x1E):
      return FunctionCode::ABORT_FILE;
    case(0x20):
      return FunctionCode::AUTH_REQUEST;
    case(0x21):
      return FunctionCode::AUTH_REQUEST_NO_ACK;
    case(0x81):
      return FunctionCode::RESPONSE;
    case(0x82):
      return FunctionCode::UNSOLICITED_RESPONSE;
    case(0x83):
      return FunctionCode::AUTH_RESPONSE;
    default:
      return FunctionCode::UNKNOWN;
  }
}
char const* FunctionCodeToString(FunctionCode arg)
{
  switch(arg)
  {
    case(FunctionCode::CONFIRM):
      return "CONFIRM";
    case(FunctionCode::READ):
      return "READ";
    case(FunctionCode::WRITE):
      return "WRITE";
    case(FunctionCode::SELECT):
      return "SELECT";
    case(FunctionCode::OPERATE):
      return "OPERATE";
    case(FunctionCode::DIRECT_OPERATE):
      return "DIRECT_OPERATE";
    case(FunctionCode::DIRECT_OPERATE_NR):
      return "DIRECT_OPERATE_NR";
    case(FunctionCode::IMMED_FREEZE):
      return "IMMED_FREEZE";
    case(FunctionCode::IMMED_FREEZE_NR):
      return "IMMED_FREEZE_NR";
    case(FunctionCode::FREEZE_CLEAR):
      return "FREEZE_CLEAR";
    case(FunctionCode::FREEZE_CLEAR_NR):
      return "FREEZE_CLEAR_NR";
    case(FunctionCode::FREEZE_AT_TIME):
      return "FREEZE_AT_TIME";
    case(FunctionCode::FREEZE_AT_TIME_NR):
      return "FREEZE_AT_TIME_NR";
    case(FunctionCode::COLD_RESTART):
      return "COLD_RESTART";
    case(FunctionCode::WARM_RESTART):
      return "WARM_RESTART";
    case(FunctionCode::INITIALIZE_DATA):
      return "INITIALIZE_DATA";
    case(FunctionCode::INITIALIZE_APPLICATION):
      return "INITIALIZE_APPLICATION";
    case(FunctionCode::START_APPLICATION):
      return "START_APPLICATION";
    case(FunctionCode::STOP_APPLICATION):
      return "STOP_APPLICATION";
    case(FunctionCode::SAVE_CONFIGURATION):
      return "SAVE_CONFIGURATION";
    case(FunctionCode::ENABLE_UNSOLICITED):
      return "ENABLE_UNSOLICITED";
    case(FunctionCode::DISABLE_UNSOLICITED):
      return "DISABLE_UNSOLICITED";
    case(FunctionCode::ASSIGN_CLASS):
      return "ASSIGN_CLASS";
    case(FunctionCode::DELAY_MEASURE):
      return "DELAY_MEASURE";
    case(FunctionCode::RECORD_CURRENT_TIME):
      return "RECORD_CURRENT_TIME";
    case(FunctionCode::OPEN_FILE):
      return "OPEN_FILE";
    case(FunctionCode::CLOSE_FILE):
      return "CLOSE_FILE";
    case(FunctionCode::DELETE_FILE):
      return "DELETE_FILE";
    case(FunctionCode::GET_FILE_INFO):
      return "GET_FILE_INFO";
    case(FunctionCode::AUTHENTICATE_FILE):
      return "AUTHENTICATE_FILE";
    case(FunctionCode::ABORT_FILE):
      return "ABORT_FILE";
    case(FunctionCode::AUTH_REQUEST):
      return "AUTH_REQUEST";
    case(FunctionCode::AUTH_REQUEST_NO_ACK):
      return "AUTH_REQUEST_NO_ACK";
    case(FunctionCode::RESPONSE):
      return "RESPONSE";
    case(FunctionCode::UNSOLICITED_RESPONSE):
      return "UNSOLICITED_RESPONSE";
    case(FunctionCode::AUTH_RESPONSE):
      return "AUTH_RESPONSE";
    default:
      return "UNKNOWN";
  }
}

}
